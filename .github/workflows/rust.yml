name: Test and publish Supreme

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test and create release
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Rust (nightly)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
          override: true

      - name: Install semantic-release-rust
        run: cargo install semantic-release-rust --version 1.0.0-alpha.6

      - name: Run tests
        run: |
          cargo test --locked
          cargo fmt --all -- --check

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with:
          semantic_version: 17.1.1
          extra_plugins: |
            @semantic-release/changelog@5.0.1
            @semantic-release/exec@5.0
            @semantic-release/git@9.0
        env:
          # GITHUB_TOKEN is added automatically by GitHub
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          
      - name: Generate Cargo.lock after release
        run: cargo generate-lockfile
      
      - name: Push updated Cargo.lock
        uses: EndBug/add-and-commit@v5
        with:
          message: 'chore(release): update lockfile'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish GitHub release
    runs-on: macos-latest
    if: ${{ success() && needs.test.outputs.new_release_published == 'true' }}
    needs: [test]
    outputs:
      sha: ${{ steps.publish.outputs.sha }}
    env:
      NAME: supreme-${{ needs.test.outputs.release }}-x86_64-apple-darwin
      TARGET: x86_64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: 'main'
      - name: Setup Rust (nightly)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          target: x86_64-apple-darwin

      - name: Publish for MacOS
        id: publish
        run: |
          cargo build --release --locked --target $TARGET
          mkdir "$NAME"
          cp "target/$TARGET/release/supreme" "$NAME/"
          cp README.md "$NAME/"
          tar -czvf "$NAME.tar.gz" "$NAME"
          SHA=$(shasum -a 256 "$NAME.tar.gz" | cut -d " " -f 1)
          echo "::set-output name=sha::$SHA"

      - name: Upload binaries to GitHub releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.NAME }}.tar.gz
          tag: ${{ needs.test.outputs.release }}

  homebrew:
    name: Publish on Homebrew
    runs-on: ubuntu-latest
    if: ${{ success() }}
    needs: [test, publish]
    steps:
      - name: Checkout Formula
        uses: actions/checkout@v2
        with:
          repository: opendevtools/homebrew-supreme

      - name: Create and push updated Homebrew formula
        run: |
          git config user.email "nattochdag@hey.com"
          git config user.name "Rickard Natt och Dag"
          cat template.rb | sed -e 's/{{version}}/'"$VERSION"'/g' -e 's/{{sha}}/'"$SHA"'/g' > Formula/supreme.rb
          git add .
          git commit -m "feat(release): $VERSION"
          git push
        env:
          SHA: ${{ needs.publish.outputs.sha }}
          VERSION: ${{ needs.test.outputs.release }}

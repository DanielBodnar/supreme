name: Test and publish Supreme

on:
  push:
    branches: [main]

# Cancel previously running workflows
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --locked

      - name: Run linting
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Analyze commits and determine if a new release should be published
  # If a new release should be published, the next version is outputted
  next-version:
    name: Get next version
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        with:
          semantic_version: 17.1.1
          extra_plugins: |
            @semantic-release/changelog@5.0.1
            @semantic-release/exec@5.0
            @semantic-release/git@9.0
        env:
          # GITHUB_TOKEN is added automatically by GitHub
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: New release was published
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}

  release:
    name: Create release
    needs: [test, next-version]
    if: needs.next-version.outputs.new_release_published == 'true'
    runs-on: ${{ matrix.build.os }}
    env:
      CARGO: cargo

    strategy:
      matrix:
        build:
          - os: macOS-latest
            target: aarch64-apple-darwin
            cross: true
          - os: macOS-latest
            target: x86_64-apple-darwin
            cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Prepare semantic-release for Rust
        run: semantic-release-cargo prepare ${{ steps.semantic.outputs.new_release_version }}

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Configure cross
        if: matrix.build.cross
        run: echo "CARGO=cross" >> "$GITHUB_ENV"

      - name: Compile release binary
        run: ${{ env.CARGO }} build --bin supreme --release --target ${{ matrix.build.target }} --verbose

  # release:
  #   name: Create release
  #   if: "!contains(github.event.head_commit.message, '[skip ci]')"
  #   needs: [test, lint, get-next-version]
  #   runs-on: ubuntu-latest
  #   outputs:
  #     release: ${{ steps.semantic.outputs.new_release_version }}
  #     new_release_published: ${{ steps.semantic.outputs.new_release_published }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install semantic-release-cargo
  #       uses: taiki-e/install-action@v2
  #       with:
  #         tool: semantic-release-cargo@2

  #     - name: Prepare semantic-release for Rust
  #       if: needs.get-next-version.outputs.new-release-published == 'true'
  #       run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

  #     - name: Setup Rust (nightly)
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         override: true

  #     # - name: Semantic Release
  #     #   uses: cycjimmy/semantic-release-action@v3
  #     #   id: semantic
  #     #   with:
  #     #     semantic_version: 17.1.1
  #     #     extra_plugins: |
  #     #       @semantic-release/changelog@5.0.1
  #     #       @semantic-release/exec@5.0
  #     #       @semantic-release/git@9.0
  #     #   env:
  #     #     # GITHUB_TOKEN is added automatically by GitHub
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #     CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  #     - name: New release was published
  #       if: needs.get-next-version.outputs.new-release-published == 'true'
  #       run: |
  #         echo ${{ steps.semantic.outputs.new_release_version }}

  #     - name: Generate Cargo.lock after release
  #       run: cargo generate-lockfile

  #     - name: Push updated Cargo.lock
  #       uses: EndBug/add-and-commit@v5
  #       with:
  #         message: "chore(release): update lockfile"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # publish:
  #   name: Publish GitHub release
  #   runs-on: macos-latest
  #   if: needs.release.outputs.new_release_published == 'true'
  #   needs: [release]
  #   outputs:
  #     sha: ${{ steps.publish.outputs.sha }}
  #   env:
  #     NAME: supreme-${{ needs.release.outputs.release }}-x86_64-apple-darwin
  #     TARGET: x86_64-apple-darwin
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         ref: "main"

  #     - name: Setup Rust (nightly)
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         override: true
  #         target: x86_64-apple-darwin

  #     - name: Publish for MacOS
  #       id: publish
  #       run: |
  #         cargo build --release --locked --target $TARGET
  #         mkdir "$NAME"
  #         cp "target/$TARGET/release/supreme" "$NAME/"
  #         cp README.md "$NAME/"
  #         tar -czvf "$NAME.tar.gz" "$NAME"
  #         SHA=$(shasum -a 256 "$NAME.tar.gz" | cut -d " " -f 1)
  #         echo "::set-output name=sha::$SHA"

  #     - name: Upload binaries to GitHub releases
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: ${{ env.NAME }}.tar.gz
  #         tag: ${{ needs.release.outputs.release }}

  # homebrew:
  #   name: Publish on Homebrew
  #   runs-on: ubuntu-latest
  #   if: needs.release.outputs.new_release_published == 'true'
  #   needs: [release, publish]
  #   env:
  #     SHA: ${{ needs.publish.outputs.sha }}
  #     VERSION: ${{ needs.release.outputs.release }}
  #   steps:
  #     - name: Checkout Homebrew formula
  #       uses: actions/checkout@v3
  #       with:
  #         persist-credentials: false
  #         fetch-depth: 0
  #         repository: opendevtools/homebrew-supreme
  #         path: homebrew-supreme

  #     - name: Create template file
  #       uses: "finnp/create-file-action@master"
  #       env:
  #         FILE_NAME: "homebrew-supreme/template.rb"
  #         FILE_BASE64: "Y2xhc3MgU3VwcmVtZSA8IEZvcm11bGEKICB2ZXJzaW9uICJ7e3ZlcnNpb259fSIKICBkZXNjICJBIENMSSB0b29sIHRoYXQgaGVscHMgeW91IGdldCB1cCBhbiBydW5uaW5nIGZhc3QiCiAgaG9tZXBhZ2UgImh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuZGV2dG9vbHMvc3VwcmVtZS1ycyIKICB1cmwgImh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuZGV2dG9vbHMvc3VwcmVtZS1ycy9yZWxlYXNlcy9kb3dubG9hZC8je3ZlcnNpb259L3N1cHJlbWUtI3t2ZXJzaW9ufS14ODZfNjQtYXBwbGUtZGFyd2luLnRhci5neiIKICBzaGEyNTYgInt7c2hhfX0iCgogIGRlZiBpbnN0YWxsCiAgICBiaW4uaW5zdGFsbCAic3VwcmVtZSIKICBlbmQKZW5kCgo="

  #     - name: Update Homebrew formula
  #       working-directory: ./homebrew-supreme
  #       run: |
  #         git config --local user.name github-actions
  #         git config --local user.email github-actions@github.com
  #         cat template.rb | sed -e 's/{{version}}/'"$VERSION"'/g' -e 's/{{sha}}/'"$SHA"'/g' > Formula/supreme.rb
  #         rm template.rb
  #         git commit -am "feat(release): $VERSION"

  #     - name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         directory: ./homebrew-supreme
  #         github_token: ${{ secrets.SUPREME_HOMEBREW_PAT }}
  #         branch: master
  #         repository: opendevtools/homebrew-supreme

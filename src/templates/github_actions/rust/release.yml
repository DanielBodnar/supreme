name: Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test and create release
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    outputs:
      release: {{{{raw}}}}${{ steps.semantic.outputs.new_release_versionÂ }}{{{{/raw}}}}
      new_release_published: {{{{raw}}}}${{ steps.semantic.outputs.new_release_published }}{{{{/raw}}}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Rust (nightly)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
          override: true

      - name: Install semantic-release-rust
        run: cargo install semantic-release-rust --version 1.0.0-alpha.8

      - name: Run tests
        run: |
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --locked
          cargo fmt --all -- --check

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with:
          semantic_version: 17.1.1
          extra_plugins: |
            @semantic-release/changelog@5.0.1
            @semantic-release/exec@5.0
            @semantic-release/git@9.0
        env:
          # GITHUB_TOKEN is added automatically by GitHub
          GITHUB_TOKEN: {{{{raw}}}}${{ secrets.GITHUB_TOKEN }}{{{{/raw}}}}
          CARGO_REGISTRY_TOKEN: {{{{raw}}}}${{ secrets.CARGO_REGISTRY_TOKEN }}{{{{/raw}}}}

      - name: Generate Cargo.lock after release
        run: cargo generate-lockfile

      - name: Push updated Cargo.lock
        uses: EndBug/add-and-commit@v5
        with:
          message: 'chore(release): update lockfile'
        env:
          GITHUB_TOKEN: {{{{raw}}}}${{ secrets.GITHUB_TOKEN }}{{{{/raw}}}}

  publish:
    name: Publish GitHub release
    runs-on: macos-latest
    if: {{{{raw}}}}${{ success() && needs.test.outputs.new_release_published == 'true' }}{{{{/raw}}}}
    needs: [test]
    env:
      NAME: {{name}}-{{{{raw}}}}${{ needs.test.outputs.release }}-x86_64-apple-darwin{{{{/raw}}}}
      TARGET: x86_64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: 'main'
      - name: Setup Rust (nightly)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          target: x86_64-apple-darwin

      - name: Publish for MacOS
        id: publish
        run: |
          cargo build --release --locked --target $TARGET
          mkdir "$NAME"
          cp "target/$TARGET/release/{{name}}" "$NAME/"
          cp README.md "$NAME/"
          tar -czvf "$NAME.tar.gz" "$NAME"

      - name: Upload binaries to GitHub releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: {{{{raw}}}}${{ secrets.GITHUB_TOKEN }}{{{{/raw}}}}
          file: {{{{raw}}}}${{ env.NAME }}.tar.gz{{{{/raw}}}}
          tag: {{{{raw}}}}${{ needs.test.outputs.release }}{{{{/raw}}}}
